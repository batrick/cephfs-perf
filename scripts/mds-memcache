#!/bin/bash

set -ex

NAME=mds-memcache

RAW="$NAME.raw"
DATA="$NAME.dat"
GRAPH="$NAME.eps"

if ! [ -f "$RAW" ]; then
(
    for mds in "$@"; do
        sqlite3 -separator $'\t' -noheader "$mds" <<EOF
SELECT MDSStatus.timestamp, json_extract(MDSStatus.status, '$.whoami') AS rank, MAX(rss)*4096, JSON_EXTRACT(dump_mempools, '$.mempool.by_pool.mds_co.bytes')
    FROM MDSStatus JOIN DaemonStats ON DaemonStats.id = MDSStatus.id AND DaemonStats.timestamp = MDSStatus.timestamp
    WHERE rank >= 0 AND rank != 18446744073709551615
    GROUP BY MDSStatus.id, MDSStatus.timestamp
    ORDER BY MDSStatus.timestamp
    ;
EOF
    done
) > "$RAW"
fi

# one data point per second
lua "$(dirname "$0")/tfix2.lua" < "$RAW" > "$DATA"

gnuplot <<EOF
set datafile separator "\\t"
set terminal postscript eps color
set output '${GRAPH}'

DATA = "${DATA}"

stats DATA skip 1
# using floor to convert float to int
COL = floor(STATS_columns)

set xdata time
set timefmt "%s"
set format x "%H:%M"
set xlabel "Time (hh:mm)"
set xtics rotate by -45 offset -.8,0

#set key below title "MDS Rank"

set ylabel "Memory Use (MB)"
set mytics
set ytics nomirror

set y2tics nomirror 10
set y2range [0:100]
set y2label 'Percent' 

#plot for [i=2:COL] DATA using 1:(sum [col=i:COL] column(col)/(1024*1024)) with filledcurves x1 title columnheader(i)
plot DATA using 1:(column(3)/(1024*1024)) with filledcurves x1 title "RSS", \
     DATA using 1:((column(4))/(1024*1024)) with filledcurves x1 title "Cache", \
     DATA using 1:((column(3)-column(4))/column(3)*100) with line lt 1 lc "black" axes x1y2 title "% smaller than RSS"
#    DATA using 1:((column(3)-column(4))/(1024*1024)) with filledcurves x1 title "RSS - Cache", \

EOF

convert -flatten -density 800x800 "$GRAPH" "$(dirname "$GRAPH")/$(basename "$GRAPH" .eps).png"
